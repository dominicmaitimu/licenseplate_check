/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface AppRoot {}
  interface ButtonDefault {
    'onClick': () => void;
  }
  interface FieldsetDefault {}
  interface FormLicenseplate {
    'data': object;
    'number': string;
  }
  interface InputLicenseplate {}
  interface InputText {
    'id': string;
    'onChange': (event: Event) => void;
    'type': string;
  }
  interface ModalDefault {
    'data': object;
  }
  interface PageHome {}
  interface TemplateDefault {}
  interface TriggerCheck {
    'onClick': () => void;
  }
  interface TriggerDefault {}
}

declare global {


  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLButtonDefaultElement extends Components.ButtonDefault, HTMLStencilElement {}
  var HTMLButtonDefaultElement: {
    prototype: HTMLButtonDefaultElement;
    new (): HTMLButtonDefaultElement;
  };

  interface HTMLFieldsetDefaultElement extends Components.FieldsetDefault, HTMLStencilElement {}
  var HTMLFieldsetDefaultElement: {
    prototype: HTMLFieldsetDefaultElement;
    new (): HTMLFieldsetDefaultElement;
  };

  interface HTMLFormLicenseplateElement extends Components.FormLicenseplate, HTMLStencilElement {}
  var HTMLFormLicenseplateElement: {
    prototype: HTMLFormLicenseplateElement;
    new (): HTMLFormLicenseplateElement;
  };

  interface HTMLInputLicenseplateElement extends Components.InputLicenseplate, HTMLStencilElement {}
  var HTMLInputLicenseplateElement: {
    prototype: HTMLInputLicenseplateElement;
    new (): HTMLInputLicenseplateElement;
  };

  interface HTMLInputTextElement extends Components.InputText, HTMLStencilElement {}
  var HTMLInputTextElement: {
    prototype: HTMLInputTextElement;
    new (): HTMLInputTextElement;
  };

  interface HTMLModalDefaultElement extends Components.ModalDefault, HTMLStencilElement {}
  var HTMLModalDefaultElement: {
    prototype: HTMLModalDefaultElement;
    new (): HTMLModalDefaultElement;
  };

  interface HTMLPageHomeElement extends Components.PageHome, HTMLStencilElement {}
  var HTMLPageHomeElement: {
    prototype: HTMLPageHomeElement;
    new (): HTMLPageHomeElement;
  };

  interface HTMLTemplateDefaultElement extends Components.TemplateDefault, HTMLStencilElement {}
  var HTMLTemplateDefaultElement: {
    prototype: HTMLTemplateDefaultElement;
    new (): HTMLTemplateDefaultElement;
  };

  interface HTMLTriggerCheckElement extends Components.TriggerCheck, HTMLStencilElement {}
  var HTMLTriggerCheckElement: {
    prototype: HTMLTriggerCheckElement;
    new (): HTMLTriggerCheckElement;
  };

  interface HTMLTriggerDefaultElement extends Components.TriggerDefault, HTMLStencilElement {}
  var HTMLTriggerDefaultElement: {
    prototype: HTMLTriggerDefaultElement;
    new (): HTMLTriggerDefaultElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement;
    'button-default': HTMLButtonDefaultElement;
    'fieldset-default': HTMLFieldsetDefaultElement;
    'form-licenseplate': HTMLFormLicenseplateElement;
    'input-licenseplate': HTMLInputLicenseplateElement;
    'input-text': HTMLInputTextElement;
    'modal-default': HTMLModalDefaultElement;
    'page-home': HTMLPageHomeElement;
    'template-default': HTMLTemplateDefaultElement;
    'trigger-check': HTMLTriggerCheckElement;
    'trigger-default': HTMLTriggerDefaultElement;
  }
}

declare namespace LocalJSX {
  interface AppRoot {}
  interface ButtonDefault {
    'onClick'?: () => void;
  }
  interface FieldsetDefault {}
  interface FormLicenseplate {
    'data'?: object;
    'number'?: string;
  }
  interface InputLicenseplate {}
  interface InputText {
    'id'?: string;
    'onChange'?: (event: Event) => void;
    'type'?: string;
  }
  interface ModalDefault {
    'data'?: object;
  }
  interface PageHome {}
  interface TemplateDefault {}
  interface TriggerCheck {
    'onClick'?: () => void;
  }
  interface TriggerDefault {}

  interface IntrinsicElements {
    'app-root': AppRoot;
    'button-default': ButtonDefault;
    'fieldset-default': FieldsetDefault;
    'form-licenseplate': FormLicenseplate;
    'input-licenseplate': InputLicenseplate;
    'input-text': InputText;
    'modal-default': ModalDefault;
    'page-home': PageHome;
    'template-default': TemplateDefault;
    'trigger-check': TriggerCheck;
    'trigger-default': TriggerDefault;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'button-default': LocalJSX.ButtonDefault & JSXBase.HTMLAttributes<HTMLButtonDefaultElement>;
      'fieldset-default': LocalJSX.FieldsetDefault & JSXBase.HTMLAttributes<HTMLFieldsetDefaultElement>;
      'form-licenseplate': LocalJSX.FormLicenseplate & JSXBase.HTMLAttributes<HTMLFormLicenseplateElement>;
      'input-licenseplate': LocalJSX.InputLicenseplate & JSXBase.HTMLAttributes<HTMLInputLicenseplateElement>;
      'input-text': LocalJSX.InputText & JSXBase.HTMLAttributes<HTMLInputTextElement>;
      'modal-default': LocalJSX.ModalDefault & JSXBase.HTMLAttributes<HTMLModalDefaultElement>;
      'page-home': LocalJSX.PageHome & JSXBase.HTMLAttributes<HTMLPageHomeElement>;
      'template-default': LocalJSX.TemplateDefault & JSXBase.HTMLAttributes<HTMLTemplateDefaultElement>;
      'trigger-check': LocalJSX.TriggerCheck & JSXBase.HTMLAttributes<HTMLTriggerCheckElement>;
      'trigger-default': LocalJSX.TriggerDefault & JSXBase.HTMLAttributes<HTMLTriggerDefaultElement>;
    }
  }
}


